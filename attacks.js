var attack = //behold! my very inefficient system!
`01: Random Stickers
(T,1,1,5,9,2)
(T,1,1,5,9,2)
(T,1,1,5,9,2)
(T,1,1,5,9,2)
(T,1,1,5,9,2)
(T,1,1,5,9,2)
(T,1,1,5,9,2)
(T,1,1,5,9,2)
(T,1,1,5,9,2)
(T,1,1,5,9,2)
(T,1,1,5,9,2)
(T,1,1,5,9,2)
(T,1,1,5,9,2)
(T,1,1,5,9,2)
(T,1,1,5,9,2)
(T,1,1,5,9,2)
(T,1,1,5,9,2)
(T,1,1,5,9,2)
(T,1,1,5,9,2)
(T,1,1,5,9,2)
(T,1,1,5,9,2)
(T,1,1,5,9,2)
(T,1,1,5,9,2)
(T,1,1,5,9,2)
(T,1,1,5,9,2)
(T,1,1,5,9,2)
(T,1,1,5,9,2)
(T,1,1,5,9,2)
(T,1,1,5,9,2)
(T,1,1,5,9,2)
()
()
02: LeftnRight
(M,1,9,Up)(M,2,9,Up)(M,3,9,Up)(M,4,9,Up)(M,5,9,Up)(M,6,9,Up)
()
()
()
(M,9,9,Up)(M,8,9,Up)(M,7,9,Up)(M,6,9,Up)(M,5,9,Up)(M,4,9,Up)
()
()
()
(M,1,9,Up)(M,2,9,Up)(M,3,9,Up)(M,4,9,Up)(M,5,9,Up)(M,6,9,Up)
()
()
()
(M,9,9,Up)(M,8,9,Up)(M,7,9,Up)(M,6,9,Up)(M,5,9,Up)(M,4,9,Up)
()
()
()
(M,1,9,Up)(M,2,9,Up)(M,3,9,Up)(M,4,9,Up)(M,5,9,Up)(M,6,9,Up)
()
()
()
(M,9,9,Up)(M,8,9,Up)(M,7,9,Up)(M,6,9,Up)(M,5,9,Up)(M,4,9,Up)
()
()
()
(M,1,9,Up)(M,2,9,Up)(M,3,9,Up)(M,4,9,Up)(M,5,9,Up)(M,6,9,Up)
()
()
()
(M,9,9,Up)(M,8,9,Up)(M,7,9,Up)(M,6,9,Up)(M,5,9,Up)(M,4,9,Up)
()
()
()
03: FollowMe
(E,*,*,16)
()
(T,1,1,2,9,8)
()
(E,*,*,16)
()
(T,1,1,2,9,8)
()
(E,*,*,16)
()
(T,1,1,2,9,8)
()
(E,*,*,16)
()
(T,1,1,2,9,8)
()
(E,*,*,16)
()
(T,1,1,2,9,8)
()
(T,1,1,2,9,8)
()
(T,1,1,2,9,8)
()
(T,1,1,2,9,8)
()
()
()
()
()
()
()
04: SeeknSweep
(W,#,vertical,2,1)
()
(W,$,horizontal,2,1)
()
(W,#,vertical,2,1)
()
(W,$,horizontal,2,1)
()
(W,#,vertical,2,1)
()
(W,$,horizontal,2,1)
()
(W,#,vertical,2,1)
()
(W,$,horizontal,2,1)
()
(W,#,vertical,2,1)
()
(W,$,horizontal,2,1)
()
(W,#,vertical,2,1)
()
(W,$,horizontal,2,1)
()
(W,#,vertical,2,1)
()
(W,$,horizontal,2,1)
()
(W,#,vertical,2,1)
()
(W,$,horizontal,2,1)
()
05: colum
(W,1,vertical,30,3)(W,7,vertical,30,3)
()
(M,9,*,Left)
(M,1,*,Right)
(M,9,*,Left)
(M,1,*,Right)
(M,9,*,Left)
(M,1,*,Right)
(M,9,*,Left)
(M,1,*,Right)
(M,9,*,Left)
(M,1,*,Right)
(M,9,*,Left)
(M,1,*,Right)
(M,9,*,Left)
(M,1,*,Right)
(M,9,*,Left)
(M,1,*,Right)
(M,9,*,Left)
(M,1,*,Right)
(M,9,*,Left)
(M,1,*,Right)
(M,9,*,Left)
(M,1,*,Right)
(M,9,*,Left)
(M,1,*,Right)
(M,9,*,Left)
(M,1,*,Right)
()
()
()
()
06: Merrygoround
(S,5,5,30,1)
()
(C,1,1,30)(C,1,9,30)(C,9,1,30)(C,9,9,30)(S,4,4,28,3)
()
(S,3,3,26,5)
()
()
()
()
()
()
()
()
()
()
()
()
()
()
()
()
()
()
()
()
()
()
()
()
()
()
()
07: ohyeahdance
(W,1,vertical,2,1)(W,3,vertical,2,1)(W,5,vertical,2,1)(W,7,vertical,2,1)(W,9,vertical,2,1)
()
()
()
(W,2,vertical,2,1)(W,4,vertical,2,1)(W,6,vertical,2,1)(W,8,vertical,2,1)
()
()
()
(W,1,vertical,2,1)(W,3,vertical,2,1)(W,5,vertical,2,1)(W,7,vertical,2,1)(W,9,vertical,2,1)
()
()
()
(W,2,vertical,2,1)(W,4,vertical,2,1)(W,6,vertical,2,1)(W,8,vertical,2,1)
()
()
()
(W,1,vertical,2,1)(W,3,vertical,2,1)(W,5,vertical,2,1)(W,7,vertical,2,1)(W,9,vertical,2,1)
()
()
()
(W,2,vertical,2,1)(W,4,vertical,2,1)(W,6,vertical,2,1)(W,8,vertical,2,1)
()
()
()
(W,1,vertical,2,1)(W,3,vertical,2,1)(W,5,vertical,2,1)(W,7,vertical,2,1)(W,9,vertical,2,1)
()
()
()
(W,2,vertical,2,1)(W,4,vertical,2,1)(W,6,vertical,2,1)(W,8,vertical,2,1)
()
()
()
08: merrygoroundtoo
(S,4,4,30,3)(M,1,1,Right)(M,1,2,Right)(M,1,3,Right)(M,9,9,Left)(M,9,8,Left)(M,9,7,Left)(M,1,9,Up)(M,2,9,Up)(M,3,9,Up)(M,9,1,Down)(M,8,1,Down)(M,7,1,Down)
()
()
()
()
()
()
()
(M,1,1,Right)(M,1,2,Right)(M,1,3,Right)(M,9,9,Left)(M,9,8,Left)(M,9,7,Left)(M,1,9,Up)(M,2,9,Up)(M,3,9,Up)(M,9,1,Down)(M,8,1,Down)(M,7,1,Down)
()
()
()
()
()
()
()
(M,1,1,Right)(M,1,2,Right)(M,1,3,Right)(M,9,9,Left)(M,9,8,Left)(M,9,7,Left)(M,1,9,Up)(M,2,9,Up)(M,3,9,Up)(M,9,1,Down)(M,8,1,Down)(M,7,1,Down)
()
()
()
()
()
()
()
(M,1,1,Right)(M,1,2,Right)(M,1,3,Right)(M,9,9,Left)(M,9,8,Left)(M,9,7,Left)(M,1,9,Up)(M,2,9,Up)(M,3,9,Up)(M,9,1,Down)(M,8,1,Down)(M,7,1,Down)
()
()
()
()
()
()
()
09: tunnelofpain
(W,1,horizontal,30,2)(W,8,horizontal,30,2)(M,9,3,Left)
()
(M,9,4,Left)
()
(M,9,5,Left)
()
(M,9,6,Left)
()
(M,9,7,Left)
()
(M,9,6,Left)
()
(M,9,5,Left)
()
(M,9,4,Left)
()
(M,9,3,Left)
()
(M,9,4,Left)
()
(M,9,5,Left)
()
(M,9,6,Left)
()
(M,9,7,Left)
()
(M,9,6,Left)
()
(M,9,5,Left)
()
()
()
10: selfmadeprison
(W,#,vertical,30,1)(W,$,horizontal,30,1)(M,9,*,Left)
(M,1,*,Right)
(M,*,9,Up)
(M,*,1,Down)
(M,9,*,Left)
(M,1,*,Right)
(M,*,9,Up)
(M,*,1,Down)
(M,9,*,Left)
(M,1,*,Right)
(M,*,9,Up)
(M,*,1,Down)
(M,9,*,Left)
(M,1,*,Right)
(M,*,9,Up)
(M,*,1,Down)
(M,9,*,Left)
(M,1,*,Right)
(M,*,9,Up)
(M,*,1,Down)
(M,9,*,Left)
(M,1,*,Right)
(M,*,9,Up)
(M,*,1,Down)
(M,9,*,Left)
(M,1,*,Right)
(M,*,9,Up)
(M,*,1,Down)
()
()
()
()
11: aloneguard
(W,1,horizontal,30,2)(W,8,horizontal,30,2)(E,5,5,30)
()
(C,1,5,30)(C,9,5,30)
()
()
()
()
()
()
()
()
()
()
()
()
()
()
()
()
()
()
()
()
()
()
()
()
()
()
()
()
()
12: claustrophobicstickers
(W,1,horizontal,30,2)(W,8,horizontal,30,2)(W,1,vertical,30,2)(W,8,vertical,30,2)(T,3,3,2,5,2)
(T,3,3,2,5,2)
(T,3,3,2,5,2)
(T,3,3,2,5,2)
(T,3,3,2,5,2)
(T,3,3,2,5,2)
(T,3,3,2,5,2)
(T,3,3,2,5,2)
(T,3,3,2,5,2)
(T,3,3,2,5,2)
(T,3,3,2,5,2)
(T,3,3,2,5,2)
(T,3,3,2,5,2)
(T,3,3,2,5,2)
(T,3,3,2,5,2)
(T,3,3,2,5,2)
(T,3,3,2,5,2)
(T,3,3,2,5,2)
(T,3,3,2,5,2)
(T,3,3,2,5,2)
(T,3,3,2,5,2)
(T,3,3,2,5,2)
(T,3,3,2,5,2)
(T,3,3,2,5,2)
(T,3,3,2,5,2)
(T,3,3,2,5,2)
(T,3,3,2,5,2)
()
()
()
()
()
13: ylevelshenaningans
(S,*,1,2,1)(S,*,2,2,1)(S,*,3,2,1)(S,*,4,2,1)(S,*,5,2,1)(S,*,6,2,1)(S,*,7,2,1)(S,*,8,2,1)(S,*,9,2,1)
()
(S,*,1,2,1)(S,*,2,2,1)(S,*,3,2,1)(S,*,4,2,1)(S,*,5,2,1)(S,*,6,2,1)(S,*,7,2,1)(S,*,8,2,1)(S,*,9,2,1)
()
(S,*,1,2,1)(S,*,2,2,1)(S,*,3,2,1)(S,*,4,2,1)(S,*,5,2,1)(S,*,6,2,1)(S,*,7,2,1)(S,*,8,2,1)(S,*,9,2,1)
()
(S,*,1,2,1)(S,*,2,2,1)(S,*,3,2,1)(S,*,4,2,1)(S,*,5,2,1)(S,*,6,2,1)(S,*,7,2,1)(S,*,8,2,1)(S,*,9,2,1)
()
(S,*,1,2,1)(S,*,2,2,1)(S,*,3,2,1)(S,*,4,2,1)(S,*,5,2,1)(S,*,6,2,1)(S,*,7,2,1)(S,*,8,2,1)(S,*,9,2,1)
()
(S,*,1,2,1)(S,*,2,2,1)(S,*,3,2,1)(S,*,4,2,1)(S,*,5,2,1)(S,*,6,2,1)(S,*,7,2,1)(S,*,8,2,1)(S,*,9,2,1)
()
(S,*,1,2,1)(S,*,2,2,1)(S,*,3,2,1)(S,*,4,2,1)(S,*,5,2,1)(S,*,6,2,1)(S,*,7,2,1)(S,*,8,2,1)(S,*,9,2,1)
()
(S,*,1,2,1)(S,*,2,2,1)(S,*,3,2,1)(S,*,4,2,1)(S,*,5,2,1)(S,*,6,2,1)(S,*,7,2,1)(S,*,8,2,1)(S,*,9,2,1)
()
(S,*,1,2,1)(S,*,2,2,1)(S,*,3,2,1)(S,*,4,2,1)(S,*,5,2,1)(S,*,6,2,1)(S,*,7,2,1)(S,*,8,2,1)(S,*,9,2,1)
()
(S,*,1,2,1)(S,*,2,2,1)(S,*,3,2,1)(S,*,4,2,1)(S,*,5,2,1)(S,*,6,2,1)(S,*,7,2,1)(S,*,8,2,1)(S,*,9,2,1)
()
(S,*,1,2,1)(S,*,2,2,1)(S,*,3,2,1)(S,*,4,2,1)(S,*,5,2,1)(S,*,6,2,1)(S,*,7,2,1)(S,*,8,2,1)(S,*,9,2,1)
()
(S,*,1,2,1)(S,*,2,2,1)(S,*,3,2,1)(S,*,4,2,1)(S,*,5,2,1)(S,*,6,2,1)(S,*,7,2,1)(S,*,8,2,1)(S,*,9,2,1)
()
(S,*,1,2,1)(S,*,2,2,1)(S,*,3,2,1)(S,*,4,2,1)(S,*,5,2,1)(S,*,6,2,1)(S,*,7,2,1)(S,*,8,2,1)(S,*,9,2,1)
()
(S,*,1,2,1)(S,*,2,2,1)(S,*,3,2,1)(S,*,4,2,1)(S,*,5,2,1)(S,*,6,2,1)(S,*,7,2,1)(S,*,8,2,1)(S,*,9,2,1)
()
(S,*,1,2,1)(S,*,2,2,1)(S,*,3,2,1)(S,*,4,2,1)(S,*,5,2,1)(S,*,6,2,1)(S,*,7,2,1)(S,*,8,2,1)(S,*,9,2,1)
()
(S,*,1,2,1)(S,*,2,2,1)(S,*,3,2,1)(S,*,4,2,1)(S,*,5,2,1)(S,*,6,2,1)(S,*,7,2,1)(S,*,8,2,1)(S,*,9,2,1)
()
14: thejollyplus
(S,1,1,30,4)(S,6,6,30,4)(S,1,6,30,4)(S,6,1,30,4)
()
(R,5,5)(C,5,1,30)(C,1,5,30)(C,5,9,30)(C,9,5,30)
()
()
()
()
()
()
()
()
()
()
()
()
()
()
()
()
()
()
()
()
()
()
()
()
()
()
()
()
()
15: heatseeking
(W,1,horizontal,30,1)(W,9,horizontal,30,1)(W,1,vertical,30,1)(W,9,vertical,30,1)(M,1,$,Right)(M,9,$,Left)
()
()
()
(M,#,1,Down)(M,#,9,Up)
()
()
()
(M,1,$,Right)(M,9,$,Left)
()
()
()
(M,#,1,Down)(M,#,9,Up)
()
()
()
(M,1,$,Right)(M,9,$,Left)
()
()
()
(M,#,1,Down)(M,#,9,Up)
()
()
()
(M,1,$,Right)(M,9,$,Left)
()
()
()
(M,#,1,Down)(M,#,9,Up)
()
()
()
16: agility
(W,1,horizontal,14,1)
()
(W,2,horizontal,12,1)
()
(W,3,horizontal,10,1)
()
(W,4,horizontal,8,1)
()
(W,5,horizontal,6,1)
()
(W,6,horizontal,4,1)
()
(W,7,horizontal,2,2)
()
()
()
(C,*,1,16)
()
()
()
()
()
()
()
()
()
()
()
()
()
()
()
17: collectunnel
(R,5,5)(W,1,vertical,30,2)(W,8,vertical,30,2)
()
(C,5,1,30)(C,5,9,30)
()
(W,*,horizontal,4,1)
()
()
()
(W,*,horizontal,4,1)
()
()
()
(W,*,horizontal,4,1)
()
()
()
(W,*,horizontal,4,1)
()
()
()
(W,*,horizontal,4,1)
()
()
()
(W,*,horizontal,4,1)
()
()
()
(W,*,horizontal,2,1)
()
()
()
18: flappysbird
(S18)
()
()
()
(S18)
()
()
()
(S18)
()
()
()
(S18)
()
()
()
(S18)
()
()
()
(S18)
()
()
()
(S18)
()
()
()
()
()
()
()
19: idroppedmychange
(C,*,*,32)(C,*,*,32)(C,*,*,32)(C,*,*,32)
(T,1,1,3,9,2)
(T,1,1,3,9,2)
(T,1,1,3,9,2)
(T,1,1,3,9,2)
(T,1,1,3,9,2)
(T,1,1,3,9,2)
(T,1,1,3,9,2)
(T,1,1,3,9,2)
(T,1,1,3,9,2)
(T,1,1,3,9,2)
(T,1,1,3,9,2)
(T,1,1,3,9,2)
(T,1,1,3,9,2)
(T,1,1,3,9,2)
(T,1,1,3,9,2)
(T,1,1,3,9,2)
(T,1,1,3,9,2)
(T,1,1,3,9,2)
(T,1,1,3,9,2)
(T,1,1,3,9,2)
(T,1,1,3,9,2)
(T,1,1,3,9,2)
(T,1,1,3,9,2)
(T,1,1,3,9,2)
(T,1,1,3,9,2)
(T,1,1,3,9,2)
(T,1,1,3,9,2)
(T,1,1,3,9,2)
(T,1,1,3,9,2)
(T,1,1,3,9,2)
(T,1,1,3,9,2)
20: idroppedmychangeagain
(C,*,*,32)(C,*,*,32)(C,*,*,32)(C,*,*,32)(M,1,*,Right)
()
(M,*,9,Up)
()
(M,9,*,Left)
()
(M,*,1,Down)
()
(M,1,*,Right)
()
(M,*,9,Up)
()
(M,9,*,Left)
()
(M,*,1,Down)
()
(M,1,*,Right)
()
(M,*,9,Up)
()
(M,9,*,Left)
()
(M,*,1,Down)
()
()
()
()
()
()
()
()
()
21: hehehe
(S,1,3,30,1)(S,2,3,30,1)(S,3,3,30,1)(S,1,4,30,1)(S,3,4,30,1)(S,1,5,30,1)(S,2,5,30,1)(S,3,5,30,1)(S,1,6,30,1)(S,1,7,30,1)(S,4,3,30,1)(S,5,3,30,1)(S,6,3,30,1)(S,4,4,30,1)(S,6,4,30,1)(S,4,5,30,1)(S,6,5,30,1)(S,4,6,30,1)(S,6,6,30,1)(S,4,7,30,1)(S,5,7,30,1)(S,6,7,30,1)(S,7,3,30,1)(S,8,3,30,1)(S,9,3,30,1)(S,7,4,30,1)(S,9,4,30,1)(S,7,5,30,1)(S,9,5,30,1)(S,7,6,30,1)(S,9,6,30,1)(S,7,7,30,1)(S,8,7,30,1)(S,9,7,30,1)
()
()
()
()
()
()
()
()
()
()
()
()
()
()
()
()
()
()
()
()
()
()
()
()
()
()
()
()
()
()
()
22: trappedinthecloset
(W,1,horizontal,30,2)(W,8,horizontal,30,2)(W,1,vertical,30,2)(W,8,vertical,30,2)(E,5,5,30)
()
()
()
()
()
()
()
()
()
()
()
()
()
()
()
()
()
()
()
()
()
()
()
()
()
()
()
()
()
()
()
23: whydidthechicken
(R,5,5)(C,1,*,32)(C,9,*,32)(M,3,9,Up)(M,7,1,Down)
(M,3,9,Up)(M,7,1,Down)
(M,3,9,Up)(M,7,1,Down)
(M,3,9,Up)(M,7,1,Down)
()
()
()
()
(M,3,9,Up)(M,7,1,Down)
(M,3,9,Up)(M,7,1,Down)
(M,3,9,Up)(M,7,1,Down)
(M,3,9,Up)(M,7,1,Down)
()
()
()
()
(M,3,9,Up)(M,7,1,Down)
(M,3,9,Up)(M,7,1,Down)
(M,3,9,Up)(M,7,1,Down)
(M,3,9,Up)(M,7,1,Down)
()
()
()
()
()
()
()
()
()
()
()
()
24: genericstalkerattack
(E,3,3,30)(E,3,7,30)(E,7,3,30)(E,7,7,30)
()
()
()
()
()
()
()
(W,$,horizontal,4,1)(W,#,vertical,4,1)
()
()
()
()
()
()
()
(W,$,horizontal,4,1)(W,#,vertical,4,1)
()
()
()
()
()
()
()
(W,$,horizontal,4,1)(W,#,vertical,4,1)
()
()
()
()
()
()
()
25: dess
(W,5,horizontal,30,1)
()
(M,*,5,Up)(M,*,5,Down)
(M,*,5,Up)(M,*,5,Down)
(M,*,5,Up)(M,*,5,Down)
(M,*,5,Up)(M,*,5,Down)
(M,*,5,Up)(M,*,5,Down)
(M,*,5,Up)(M,*,5,Down)
(M,*,5,Up)(M,*,5,Down)
(M,*,5,Up)(M,*,5,Down)
(M,*,5,Up)(M,*,5,Down)
(M,*,5,Up)(M,*,5,Down)
(M,*,5,Up)(M,*,5,Down)
(M,*,5,Up)(M,*,5,Down)
(M,*,5,Up)(M,*,5,Down)
(M,*,5,Up)(M,*,5,Down)
(M,*,5,Up)(M,*,5,Down)
(M,*,5,Up)(M,*,5,Down)
(M,*,5,Up)(M,*,5,Down)
(M,*,5,Up)(M,*,5,Down)
(M,*,5,Up)(M,*,5,Down)
(M,*,5,Up)(M,*,5,Down)
(M,*,5,Up)(M,*,5,Down)
(M,*,5,Up)(M,*,5,Down)
(M,*,5,Up)(M,*,5,Down)
(M,*,5,Up)(M,*,5,Down)
(M,*,5,Up)(M,*,5,Down)
(M,*,5,Up)(M,*,5,Down)
(M,*,5,Up)(M,*,5,Down)
(M,*,5,Up)(M,*,5,Down)
(M,*,5,Up)(M,*,5,Down)
()
26: spotlights
(W,1,vertical,2,1)(W,5,vertical,2,1)(W,9,vertical,2,1)
()
(W,4,vertical,2,1)(W,8,vertical,2,1)
()
(W,3,vertical,2,1)(W,7,vertical,2,1)
()
(W,2,vertical,2,1)(W,6,vertical,2,1)
()
(W,1,vertical,2,1)(W,5,vertical,2,1)(W,9,vertical,2,1)
()
(W,4,vertical,2,1)(W,8,vertical,2,1)
()
(W,3,vertical,2,1)(W,7,vertical,2,1)
()
(W,2,vertical,2,1)(W,6,vertical,2,1)
()
(W,1,vertical,2,1)(W,5,vertical,2,1)(W,9,vertical,2,1)
()
(W,4,vertical,2,1)(W,8,vertical,2,1)
()
(W,3,vertical,2,1)(W,7,vertical,2,1)
()
(W,2,vertical,2,1)(W,6,vertical,2,1)
()
(W,1,vertical,2,1)(W,5,vertical,2,1)(W,9,vertical,2,1)
()
(W,4,vertical,2,1)(W,8,vertical,2,1)
()
(W,3,vertical,2,1)(W,7,vertical,2,1)
()
(W,2,vertical,2,1)(W,6,vertical,2,1)
()
27: dittobutsideways
(W,1,horizontal,2,1)(W,5,horizontal,2,1)(W,9,horizontal,2,1)
()
(W,4,horizontal,2,1)(W,8,horizontal,2,1)
()
(W,3,horizontal,2,1)(W,7,horizontal,2,1)
()
(W,2,horizontal,2,1)(W,6,horizontal,2,1)
()
(W,1,horizontal,2,1)(W,5,horizontal,2,1)(W,9,horizontal,2,1)
()
(W,4,horizontal,2,1)(W,8,horizontal,2,1)
()
(W,3,horizontal,2,1)(W,7,horizontal,2,1)
()
(W,2,horizontal,2,1)(W,6,horizontal,2,1)
()
(W,1,horizontal,2,1)(W,5,horizontal,2,1)(W,9,horizontal,2,1)
()
(W,4,horizontal,2,1)(W,8,horizontal,2,1)
()
(W,3,horizontal,2,1)(W,7,horizontal,2,1)
()
(W,2,horizontal,2,1)(W,6,horizontal,2,1)
()
(W,1,horizontal,2,1)(W,5,horizontal,2,1)(W,9,horizontal,2,1)
()
(W,4,horizontal,2,1)(W,8,horizontal,2,1)
()
(W,3,horizontal,2,1)(W,7,horizontal,2,1)
()
(W,2,horizontal,2,1)(W,6,horizontal,2,1)
()
28: worms
(S28,C)(S28,A)
(S28,A)
(S28,A)
(S28,A)
(S28,C)(S28,B)
(S28,B)
(S28,B)
(S28,B)
(S28,C)(S28,A)
(S28,A)
(S28,A)
(S28,A)
(S28,C)(S28,B)
(S28,B)
(S28,B)
(S28,B)
(S28,C)(S28,A)
(S28,A)
(S28,A)
(S28,A)
(S28,C)(S28,B)
(S28,B)
(S28,B)
(S28,B)
()
()
()
()
()
()
()
()
29: crushers
(W,H,vertical,2,3)
()
()
()
(W,H,vertical,2,3)
()
()
()
(W,H,vertical,2,3)
()
()
()
(W,H,vertical,2,3)
()
()
()
(W,H,vertical,2,3)
()
()
()
(W,H,vertical,2,3)
()
()
()
(W,H,vertical,2,3)
()
()
()
()
()
()
()
30: minefield
(W,1,horizontal,30,1)(W,9,horizontal,30,1)
(T,2,2,1,7,8)
(C,1,5,30)(C,9,5,30)
(T,2,2,1,7,8)
(T,2,2,1,7,8)
(T,2,2,1,7,8)
(T,2,2,1,7,8)
(T,2,2,1,7,8)
(T,2,2,1,7,8)
(T,2,2,1,7,8)
(T,2,2,1,7,8)
(T,2,2,1,7,8)
(T,2,2,1,7,8)
(T,2,2,1,7,8)
(T,2,2,1,7,8)
(T,2,2,1,7,8)
(T,2,2,1,7,8)
(T,2,2,1,7,8)
(T,2,2,1,7,8)
(T,2,2,1,7,8)
(T,2,2,1,7,8)
(T,2,2,1,7,8)
(T,2,2,1,7,8)
(T,2,2,1,7,8)
()
()
()
()
()
()
()
()
31: getdown
(W,1,horizontal,30,1)
()
(M,1,$,Right)(W,2,horizontal,28,2)
()
(M,9,$,Left)(W,4,horizontal,26,2)
()
(M,1,$,Right)
()
(M,9,$,Left)
()
(M,1,$,Right)
()
(M,9,$,Left)
()
(M,1,$,Right)
()
(M,9,$,Left)
()
(M,1,$,Right)
()
(M,9,$,Left)
()
(M,1,$,Right)
()
(M,9,$,Left)
()
()
()
()
()
()
()
32: sansdance
(W,1,horizontal,30,1)(M,1,2,Right)(M,1,3,Right)(M,1,4,Right)(M,1,5,Right)
()
(M,9,6,Left)(M,9,7,Left)(M,9,8,Left)(M,9,9,Left)
()
(M,1,2,Right)(M,1,3,Right)(M,1,4,Right)(M,1,5,Right)
()
(M,9,6,Left)(M,9,7,Left)(M,9,8,Left)(M,9,9,Left)
()
(M,1,2,Right)(M,1,3,Right)(M,1,4,Right)(M,1,5,Right)
()
(M,9,6,Left)(M,9,7,Left)(M,9,8,Left)(M,9,9,Left)
()
(M,1,2,Right)(M,1,3,Right)(M,1,4,Right)(M,1,5,Right)
()
(M,9,6,Left)(M,9,7,Left)(M,9,8,Left)(M,9,9,Left)
()
(M,1,2,Right)(M,1,3,Right)(M,1,4,Right)(M,1,5,Right)
()
(M,9,6,Left)(M,9,7,Left)(M,9,8,Left)(M,9,9,Left)
()
(M,1,2,Right)(M,1,3,Right)(M,1,4,Right)(M,1,5,Right)
()
(M,9,6,Left)(M,9,7,Left)(M,9,8,Left)(M,9,9,Left)
()
()
()
()
()
()
()
()
()
33: target
(S,3,3,30,1)(S,3,4,30,1)(S,4,3,30,1)(S,3,7,30,1)(S,4,7,30,1)(S,3,6,30,1)(S,7,7,30,1)(S,6,7,30,1)(S,7,6,30,1)(S,6,3,30,1)(S,7,3,30,1)(S,7,4,30,1)(W,1,horizontal,30,1)(W,9,horizontal,30,1)(W,1,vertical,30,1)(W,9,vertical,30,1)(E,2,5,30)(E,8,5,30)
()
()
()
()
()
()
()
()
()
()
()
()
()
()
()
()
()
()
()
()
()
()
()
()
()
()
()
()
()
()
()
34: timing
(S,4,4,28,1)(S,4,5,28,1)(S,4,6,28,1)(S,5,4,28,1)(S,6,4,28,1)(S,5,6,28,1)(S,6,6,28,1)(S,6,5,28,1)(S,5,5,13,1)
()
()
()
()
()
()
()
()
()
()
()
()
()
()
()
()
(C,5,5,16)
()
()
()
()
()
()
()
()
()
()
()
()
()
()
35: itsrainingsomewhere
(E,2,5,30)(E,5,5,30)(E,8,5,30)(M,*,1,Down)
()
(M,*,1,Down)
()
(M,*,1,Down)
()
(M,*,1,Down)
()
(M,*,1,Down)
()
(M,*,1,Down)
()
(M,*,1,Down)
()
(M,*,1,Down)
()
(M,*,1,Down)
()
(M,*,1,Down)
()
(M,*,1,Down)
()
(M,*,1,Down)
()
()
()
()
()
()
()
()
()
36: snakeup
(S,1,7,30,1)(S,2,7,30,1)(S,3,7,30,1)(S,4,7,30,1)(S,5,7,30,1)(S,6,7,30,1)(S,7,3,30,1)(S,8,3,30,1)(S,9,3,30,1)(S,4,3,30,1)(S,5,3,30,1)(S,6,3,30,1)
()
(R,1,9)(C,9,1,30)
()
()
()
()
()
()
()
()
()
()
()
()
()
()
()
()
()
()
()
()
()
()
()
()
()
()
()
()
()
37: boxattack
(S37)(S,1,1,26,3)(S,7,7,26,3)(S,1,7,26,3)(S,7,1,26,3)
()
(R,5,5)
()
()
()
()
()
(S37)
()
(R,5,5)
()
()
()
()
()
(S37)
()
(R,5,5)
()
()
()
()
()
(S37)
()
(R,5,5)
()
()
()
()
()
38: memory
(S38,A)(R,5,8)(S,3,2,8,1)(S,4,2,8,1)(S,5,2,8,1)(S,6,2,8,1)(S,7,2,8,1)(S,3,4,8,1)(S,4,4,8,1)(S,5,4,8,1)(S,6,4,8,1)(S,7,4,8,1)(S,3,3,8,1)(S,7,3,8,1)
()
(S38,B)
()
()
()
()
()
(S,3,1,22,1)(S,3,2,22,1)(S,3,3,22,1)(S,3,4,22,1)(S,3,5,22,1)(S,3,6,22,1)(S,3,7,22,1)(S,7,1,22,1)(S,7,2,22,1)(S,7,3,22,1)(S,7,4,22,1)(S,7,5,22,1)(S,7,6,22,1)(S,7,7,22,1)
()
()
()
()
()
()
()
(W,8,horizontal,14,2)
()
()
()
()
()
()
()
(S38,C)
()
()
()
()
()
()
()
39: side2side
(R,5,5)(W,1,horizontal,30,4)(W,6,horizontal,30,4)(C,1,5,8)
()
()
()
()
()
()
()
(C,9,5,8)
()
()
()
()
()
()
()
(C,1,5,8)
()
()
()
()
()
()
()
(C,9,5,8)
()
()
()
()
()
()
()
40: maze
(S,1,1,30,1)(S,2,1,30,1)(S,3,1,30,1)(S,4,1,30,1)(S,5,1,30,1)(S,6,1,30,1)(S,7,1,30,1)(S,8,1,30,1)(S,9,1,30,1)(S,1,2,30,1)(S,5,2,30,1)(S,9,2,30,1)(S,1,3,30,1)(S,2,3,30,1)(S,3,3,30,1)(S,5,3,30,1)(S,7,3,30,1)(S,9,3,30,1)(S,1,4,30,1)(S,7,4,30,1)(S,9,4,30,1)(S,1,5,30,1)(S,3,5,30,1)(S,4,5,30,1)(S,5,5,30,1)(S,7,5,30,1)(S,9,5,30,1)(S,1,6,30,1)(S,3,6,30,1)(S,5,6,30,1)(S,7,6,30,1)(S,9,6,30,1)(S,1,7,30,1)(S,3,7,30,1)(S,5,7,30,1)(S,9,7,30,1)(S,1,8,30,1)(S,5,8,30,1)(S,6,8,30,1)(S,7,8,30,1)(S,9,8,30,1)(S,1,9,30,1)(S,2,9,30,1)(S,3,9,30,1)(S,4,9,30,1)(S,5,9,30,1)(S,6,9,30,1)(S,7,9,30,1)(S,8,9,30,1)(S,9,9,30,1)
()
(R,2,2)(C,8,8,30)(C,4,6,30)
()
()
()
()
()
()
()
()
()
()
()
()
()
()
()
()
()
()
()
()
()
()
()
()
()
()
()
()
()
Interlude:
(I,B)
()
()
()
()
()
()
()
(I,C)
()
()
()
()
()
()
(I,A)
`

var attacks = attack.split("\n")
class bobby {
    constructor() {
    this.tick = 0;
    this.clbrt = 1;
    this.pattern = 0;
    this.interpret = this.interpret.bind(this);
    this.twoeightA = 0;
    this.twoeightB = 0;
    this.curattack = 0;
    this.memory = 0;
    document.addEventListener('tick', this.interpret);
  }
    clearboard(){
      for (let i = Dangers.length - 1; i >= 0; i--){
        if (!(Dangers[i] instanceof ShadowMe || Dangers[i] instanceof DCollect)){killme(Dangers[i])}
          }
    }

    load(num){
      this.curattack = num;
      this.pattern = attacks.slice(0+(num-1)*33,33*num);
    }
    interpret(){
      if (startup == 5){
        if (this.pattern instanceof Array){
          this.tick += 1;
        }
        if (this.pattern.length == 17){
          if (this.tick == 17){
            this.load(Randint(40)+1);
            this.tick = 1;
            beat = 1;
            attacknum += 1;
            isinterlude = false;
            mixer.mixuptime = false;
            pulp.active = true;
          }
          else{this.clbrt *= -1}
        }
        if (this.tick == 32){
          this.load(Randint(40)+1);
          if ((variant == "shadowme" || variant == "strikes") && (this.curattack == 39 || this.curattack == 15)){
            this.load(38);
          }
        }
        if (this.tick == 33){
          this.clearboard();
          if (attacknum % 4 != 0){
          this.tick = 1;
          beat = 1;
          attacknum += 1;
          pulp.active = true;
          }
          else{
            this.pattern = attacks.slice(0+(41-1)*33,33*40+17);
            isinterlude = true;
            this.tick = 1;
            pulp.active = true;
          }
        }
        let box = [];
        let dat = "";
        let stir = this.pattern[this.tick].split("");
        stir.forEach((i) => {
          switch (i){
            case "("://start packing
              dat = "";
              box = [];
              break;
            case ")"://stop packing and send off
              box.push(dat);
              this.create(box);
              break;
            case ",":
              box.push(dat)
              dat = "";
              break;
            case "*":
              dat += (Randint(9)+1).toString()
              break;
            case "H":
              dat += (Math.floor(Math.random()*3)+1)*3-2
              break;
            case "#":
              dat += (PlayerPos[0]).toString()
              break;
            case "$":
              dat += (PlayerPos[1]).toString()
              break;
            default:
              dat += i;
              break;
          }
        })
      }
    }

    create(box){
      switch (box[0]) {
        case "S": //Sticker
          Dangers.push(new DSticker(Number(box[1]), Number(box[2]), Number(box[3]), Number(box[4])))
          break;
        case "M": //Mover
          Dangers.push(new DMover(Number(box[1]), Number(box[2]), box[3]))
          break;
        case "W": //Sweeper / Wiper
          Dangers.push(new DSweeper(Number(box[1]), (box[2]), Number(box[3]), Number(box[4])))
          break;
        case "C": //Collect
          Dangers.push(new DCollect(Number(box[1]), Number(box[2]), Number(box[3])))
          break;
        case "E": //Stalker / Enemy
          Dangers.push(new DStalker(Number(box[1]), Number(box[2]), Number(box[3])))
          break;
        case "T": //Targeted Area (for stickers ig), makes a bunch of stickers in a designated area
          for(let i = 0; i < box[3]; i++){
             Dangers.push(new DSticker(Number(box[1]) + Randint(Number(box[4])), Number(box[2]) + Randint(Number(box[4])), Number(box[5]), 1))
          }
          break;
        case "R": //Relocate
          PlayerPos = [Number(box[1]),Number(box[2])]
          break;
        case "S18": //special case (he got lazy)
          let hole = Randint(7)+1
          let holes = [hole, hole+1, hole+2]
          for(let i = 1; i < 10; i++){
            if (!holes.includes(i)){
              Dangers.push(new DMover(9,i,"Left"))
            }
          }
          break;
        case "S28": //makes worms for attack 28
          switch (box[1]){
            case "A":
              Dangers.push(new DMover(9,this.twoeightA,"Left"));
              Dangers.push(new DMover(9,this.twoeightB,"Left"));
              break;
            case "B":
              Dangers.push(new DMover(1,this.twoeightA,"Right"));
              Dangers.push(new DMover(1,this.twoeightB,"Right"));
              break;
            case "C":
              this.twoeightA = Randint(9)+1;
              this.twoeightB = Randint(9)+1;
              break;
          }
          break;
          case "S37": //another special case woah
          for (let i = Dangers.length - 1; i >= 0; i--){
            if (Dangers[i] instanceof DMover) {killme(Dangers[i])}
          }
          let choice = Randint(4) + 1;
          if (choice != 1){
            Dangers.push(new DMover(7,4,"Left"));
            Dangers.push(new DMover(7,5,"Left"));
            Dangers.push(new DMover(7,6,"Left"));
          }
          if (choice != 2){
            Dangers.push(new DMover(3,4,"Right"));
            Dangers.push(new DMover(3,5,"Right"));
            Dangers.push(new DMover(3,6,"Right"));
          }
          if (choice != 3){
            Dangers.push(new DMover(4,7,"Up"));
            Dangers.push(new DMover(5,7,"Up"));
            Dangers.push(new DMover(6,7,"Up"));
          }
          if (choice != 4){
            Dangers.push(new DMover(4,3,"Down"));
            Dangers.push(new DMover(5,3,"Down"));
            Dangers.push(new DMover(6,3,"Down"));
          }
          break;
          case "S38": //god hes getting so lazy
            switch (box[1]){
            case "A": //what we memorizing?
              this.memory = Randint(3)+1;
              break;
            case "B": //alright now draw it
              Dangers.push(new DSticker(3+this.memory,3,6,1))
              break;
            case "C": //did you choose right?
              if (this.memory != 1){Dangers.push(new DSweeper(1,"vertical",6,2))}
              if (this.memory != 2){Dangers.push(new DSweeper(4,"vertical",6,3))}
              if (this.memory != 3){Dangers.push(new DSweeper(8,"vertical",6,2))}
              break;
          }
          break;
          case "I":
            switch (box[1]){
              case "A":
                mixer.variantapplier();
                increasetempo();
                break;
              case "B":
                mixer.variantpicker();
                mixer.mixuptext = (mixer.pickedvariant != "none")
                break;
              case "C":
                mixer.mixuptime = mixer.pickedvariant != "none";
                if (mixer.mixuptime){mixer.playmixupaudio()};
                break;
            }
            break;
        default:
          break;
      }
    }

    newchoice(){
      this.nextdirection = Randint(4);
    }
}

